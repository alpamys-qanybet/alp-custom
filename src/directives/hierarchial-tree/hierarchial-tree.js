// Generated by CoffeeScript 1.4.0
(function() {

  angular.module('alpCustom').service('hierarchialTreeService', [
    function() {
      this.map = [];
      this.exists = function(name) {
        return this.map.indexOf(name) !== -1;
      };
      this.put = function(name) {
        this.map[name] = {
          component: null,
          fn: null,
          list: []
        };
      };
      return this;
    }
  ]);

  angular.module('alpCustom').directive("hierarchialTree", [
    'hierarchialTreeService', 'LIB_URL', function(hierarchialTreeService, LIB_URL) {
      return {
        restrict: "E",
        replace: true,
        templateUrl: function(elm, attrs) {
          if (attrs.template) {
            return LIB_URL + 'directives/hierarchial-tree/hierarchial-tree-' + attrs.template + '.html';
          } else {
            return attrs.templateUrl || LIB_URL + 'directives/hierarchial-tree/hierarchial-tree.html';
          }
        },
        scope: {
          id: '=',
          fetch: '&',
          uid: '@',
          depth: '@',
          component: '='
        },
        controller: ["$scope", "$element", function($scope, $element) {}],
        link: function(scope, elm, attrs) {
          var fetch, name;
          if (!scope.depth) {
            scope.depth = 0;
          }
          scope.templateUrl = attrs.templateUrl;
          name = '';
          if (scope.uid) {
            name = scope.uid;
          } else {
            name = 'uid' + scope.$id;
            if (!hierarchialTreeService.exists(name)) {
              hierarchialTreeService.put(name);
              hierarchialTreeService.map[name].fn = function(fn, id) {
                if (id) {
                  scope.fetch({
                    id: id,
                    fn: fn
                  });
                } else {
                  scope.fetch({
                    id: null,
                    fn: fn
                  });
                }
              };
              scope.$watch(function() {
                return hierarchialTreeService.map[name].component;
              }, function(newvalue, oldvalue) {
                scope.component = newvalue;
              }, true);
            }
          }
          scope.passUidToMember = name;
          fetch = function(fn, id) {
            if (id) {
              hierarchialTreeService.map[name].fn(function(data) {
                fn(angular.copy(data));
              }, id);
            } else {
              hierarchialTreeService.map[name].fn(function(data) {
                fn(angular.copy(data));
              });
            }
          };
          if (scope.id) {
            fetch(function(data) {
              scope.list = data;
              hierarchialTreeService.map[name].list = hierarchialTreeService.map[name].list.concat(scope.list);
            }, scope.id);
          } else {
            fetch(function(data) {
              scope.list = data;
              hierarchialTreeService.map[name].list = hierarchialTreeService.map[name].list.concat(scope.list);
            });
          }
        }
      };
    }
  ]);

  angular.module('alpCustom').directive("hierarchialTreeNode", [
    '$templateRequest', '$sce', '$compile', 'hierarchialTreeService', 'LIB_URL', function($templateRequest, $sce, $compile, hierarchialTreeService, LIB_URL) {
      return {
        restrict: "E",
        replace: true,
        templateUrl: function(elm, attrs) {
          if (attrs.template) {
            return LIB_URL + 'directives/hierarchial-tree/hierarchial-tree-node-' + attrs.template + '.html';
          } else {
            return attrs.nodeTemplateUrl || LIB_URL + 'directives/hierarchial-tree/hierarchial-tree-node.html';
          }
        },
        scope: {
          item: '=',
          uid: '@'
        },
        controller: ["$scope", "$element", function($scope, $element) {}],
        link: function(scope, elm, attrs) {
          var px;
          px = 20 * Number(attrs.depth);
          scope.select = function() {
            var i, _i, _len, _ref;
            _ref = hierarchialTreeService.map[scope.uid].list;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              i.selected = false;
            }
            scope.item.selected = true;
            hierarchialTreeService.map[scope.uid].component = angular.copy(scope.item);
          };
          scope.item.indented = {
            position: 'relative',
            left: px + 'px'
          };
          scope.load = function() {
            var el, nextDepth, tt;
            nextDepth = Number(attrs.depth) + 1;
            if (scope.item.hasChildren) {
              scope.item.loaded = true;
              scope.item.open = true;
              el = angular.element('<span/>');
              tt = '<hierarchial-tree id="item.id" uid="{{uid}}" ng-show="item.open" depth="{{' + nextDepth + '}}"';
              if (attrs.template) {
                tt += ' template="' + attrs.template + '"';
              } else if (attrs.templateUrl) {
                tt += ' template-url="' + attrs.templateUrl + '"';
              }
              tt += '></hierarchial-tree>';
              el.append(tt);
              $compile(el)(scope);
              elm.append(el);
            }
          };
          scope.expand = function() {
            scope.item.open = true;
          };
          scope.collapse = function() {
            scope.item.open = false;
          };
        }
      };
    }
  ]);

}).call(this);
