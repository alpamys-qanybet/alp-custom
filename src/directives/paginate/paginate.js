// Generated by CoffeeScript 1.4.0
(function() {

  angular.module('alpCustom').directive("paginate", [
    'LIB_URL', function(LIB_URL) {
      return {
        restrict: "E",
        replace: true,
        templateUrl: function(elm, attrs) {
          if (attrs.template) {
            return LIB_URL + 'directives/paginate/paginate-' + attrs.template + '.html';
          } else {
            return attrs.templateUrl || LIB_URL + 'directives/paginate/paginate.html';
          }
        },
        scope: {
          'page': '&',
          'count': '@',
          'index': '=',
          'showIndex': '=',
          'limit': '=',
          'limits': '=',
          'range': '@'
        },
        controller: [
          "$scope", "$element", function(scope, elm) {
            return scope.process = function(index) {
              if (scope.index === index || index < 0 || index >= scope.list.length) {
                return;
              }
              scope.index = index;
            };
          }
        ],
        compile: function(cElement, cAttributes, transclude) {
          var defaultValues, limits, showLimit;
          defaultValues = {
            index: 0,
            limit: 10,
            range: 10
          };
          if (!cAttributes.index) {
            cAttributes.index = '' + defaultValues.index;
          }
          if (!cAttributes.limit) {
            cAttributes.limit = '' + defaultValues.limit;
          }
          showLimit = false;
          if (cAttributes.limits) {
            limits = JSON.parse(cAttributes.limits);
            if (!_.isEmpty(limits)) {
              cAttributes.limit = '' + limits[0];
              showLimit = limits.length > 1;
            }
          }
          if (!cAttributes.range) {
            cAttributes.range = '' + defaultValues.range;
          }
          return {
            pre: function(scope, elm, attrs) {},
            post: function(scope, elm, attrs) {
              var loadButtons, onInit, range;
              scope.showLimit = showLimit;
              range = Number(scope.range);
              loadButtons = function() {
                var begin, end, n, _i, _results;
                n = Math.ceil(scope.count / scope.limit);
                scope.list = (function() {
                  _results = [];
                  for (var _i = 0; 0 <= n ? _i < n : _i > n; 0 <= n ? _i++ : _i--){ _results.push(_i); }
                  return _results;
                }).apply(this);
                begin = scope.index - range / 2;
                if (begin < 0) {
                  begin = 0;
                }
                end = scope.index + range / 2;
                if (end > n) {
                  end = n;
                }
                if ((end - begin) < range) {
                  end = begin + range;
                }
                scope.replist = scope.list.slice(begin, end);
              };
              onInit = {
                count: true,
                index: true,
                limit: true
              };
              scope.$watch('count', function() {
                if (onInit.count) {
                  onInit.count = false;
                  return;
                }
                loadButtons();
              });
              scope.$watch('index', function() {
                if (onInit.index) {
                  onInit.index = false;
                  return;
                }
                scope.page({
                  index: scope.index,
                  limit: scope.limit
                });
                loadButtons();
              });
              scope.$watch('limit', function() {
                if (onInit.limit) {
                  onInit.limit = false;
                  return;
                }
                if (scope.index === 0) {
                  scope.page({
                    index: scope.index,
                    limit: scope.limit
                  });
                } else {
                  scope.index = 0;
                }
                loadButtons();
              });
              scope.page({
                index: scope.index,
                limit: scope.limit
              });
            }
          };
        }
      };
    }
  ]);

}).call(this);
